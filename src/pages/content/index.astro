---
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';

const collection = await getCollection('content');
const nodes = collection
  .filter(node => node.data)
  .sort((a, b) => (b.data.date?.valueOf() ?? 0) - (a.data.date?.valueOf() ?? 0));

const tagSet = new Set<string>();
nodes.forEach(node => node.data.filetags?.forEach(tag => tagSet.add(tag)));
const tags = Array.from(tagSet).sort();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Content - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
  </head>
  <body class="bg-white text-zinc-900 antialiased font-sans dark:bg-zinc-900 dark:text-zinc-100">
    <a href="#main" class="sr-only focus:not-sr-only fixed left-2 top-2 z-50 rounded border border-gray-300 bg-white px-3 py-2 text-gray-900 shadow focus:outline-none dark:border-gray-700 dark:bg-gray-900 dark:text-gray-100">Skip to main content</a>
    <main id="main" class="mx-auto max-w-prose px-4 py-8">
      <article class="prose prose-zinc dark:prose-invert">
        <h1><a href="/">Content</a></h1>
        <div class="mb-6 flex flex-wrap gap-2">
          {tags.map(tag => (
            <button type="button" class="inline-flex items-center rounded border border-gray-300 px-3 py-1 text-xs font-medium uppercase tracking-wide text-gray-600 hover:bg-gray-50 hover:border-gray-400 dark:border-gray-700 dark:text-gray-300 dark:hover:bg-gray-800" data-tag={tag} aria-pressed="false">{tag}</button>
          ))}
        </div>

        <ul id="items">
          {nodes.map(node => (
            <li data-tags={(node.data.filetags ?? []).join(' ')}>
              <a href={`/content/${node.data.slug}/`}>{node.data.title}</a>
            </li>
          ))}
        </ul>
      </article>
      <Footer />
    </main>
    <script>
      // Cache DOM references
      const tagButtons = document.querySelectorAll<HTMLButtonElement>('button[data-tag]');
      const items = document.querySelectorAll<HTMLLIElement>('#items li');
      let selectedTags = new Set<string>();

      function updateDisplay() {
        // Convert selectedTags to array once for efficiency
        const selectedTagsArray = Array.from(selectedTags);
        
        // Update button states
        tagButtons.forEach(btn => {
          const tag = btn.dataset.tag!;
          btn.setAttribute('aria-pressed', selectedTags.has(tag) ? 'true' : 'false');
        });

        // Filter items
        items.forEach(li => {
          const itemTags = li.dataset.tags?.split(' ') || [];
          const matches = selectedTags.size === 0 || 
            selectedTagsArray.every(tag => itemTags.includes(tag));
          li.hidden = !matches;
        });

        // Update URL
        const query = selectedTags.size > 0 ? 
          `?tags=${selectedTagsArray.join(',')}` : '';
        history.replaceState(null, '', query);
      }

      // Use event delegation for better performance
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.tagName === 'BUTTON' && target.hasAttribute('data-tag')) {
          const tag = target.dataset.tag!;
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
          } else {
            selectedTags.add(tag);
          }
          updateDisplay();
        }
      });

      // Handle initial URL parameters
      const params = new URLSearchParams(location.search);
      const initialTags = params.get('tags');
      if (initialTags) {
        selectedTags = new Set(initialTags.split(','));
        updateDisplay();
      }
    </script>
  </body>
</html>

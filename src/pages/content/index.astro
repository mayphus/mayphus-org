---
import BaseHead from '../../components/BaseHead.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';

const collection = await getCollection('content');
const nodes = collection
  .filter(node => node.data)
  .sort((a, b) => (b.data.date?.valueOf() ?? 0) - (a.data.date?.valueOf() ?? 0));

const tagSet = new Set<string>();
nodes.forEach(node => node.data.filetags?.forEach(tag => tagSet.add(tag)));
const tags = Array.from(tagSet).sort();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Content - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <main id="main" class="mx-auto max-w-3xl px-4 py-12 lg:px-6">
      <article class="prose dark:prose-invert">
        <h1>Content</h1>
      </article>

      {tags.length > 0 && (
        <nav class="mt-8 flex flex-wrap gap-2" aria-label="Filter by tag">
          {tags.map(tag => (
            <button
              type="button"
              class="rounded-full border border-neutral-300 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-neutral-600 transition-colors hover:bg-neutral-100 hover:text-neutral-900 aria-[pressed=true]:border-neutral-900 aria-[pressed=true]:bg-neutral-900 aria-[pressed=true]:text-white dark:border-neutral-700 dark:text-neutral-400 dark:hover:bg-neutral-800 dark:hover:text-neutral-100 dark:aria-[pressed=true]:border-neutral-100 dark:aria-[pressed=true]:bg-neutral-100 dark:aria-[pressed=true]:text-neutral-900"
              data-tag={tag}
              aria-pressed="false"
              aria-label={`Toggle tag ${tag}`}
              >
              {tag}
            </button>
          ))}
        </nav>
      )}

      <ul id="items" class="mt-8 space-y-6">
        {nodes.map(node => (
          <li data-tags={(node.data.filetags ?? []).join(' ')} class="transition-opacity duration-200">
            <a href={`/content/${node.data.slug}/`} class="font-medium text-neutral-900 transition-colors hover:text-neutral-600 dark:text-neutral-100 dark:hover:text-neutral-300">
              {node.data.title}
            </a>
            {node.data.filetags && (
              <p class="mt-1 text-sm text-neutral-500 dark:text-neutral-400">
                {node.data.filetags.map(tag => (
                  <span class="mr-1">{tag}</span>
                ))}
              </p>
            )}
          </li>
        ))}
      </ul>

    </main>
    <script>
      // Cache DOM references
      const tagButtons = document.querySelectorAll<HTMLButtonElement>('button[data-tag]');
      const items = document.querySelectorAll<HTMLElement>('#items li');
      let selectedTags = new Set<string>();

      function updateDisplay() {
        // Convert selectedTags to array once for efficiency
        const selectedTagsArray = Array.from(selectedTags);
        
        // Update button states
        tagButtons.forEach(btn => {
          const tag = btn.dataset.tag!;
          const isSelected = selectedTags.has(tag);
          btn.setAttribute('aria-pressed', isSelected ? 'true' : 'false');
        });

        // Filter items
        items.forEach(item => {
          const itemTags = item.dataset.tags?.split(' ') || [];
          const matches = selectedTags.size === 0 || 
            selectedTagsArray.every(tag => itemTags.includes(tag));
          item.hidden = !matches;
        });

        // Update URL
        const query = selectedTags.size > 0 ? 
          `?tags=${selectedTagsArray.join(',')}` : '';
        history.replaceState(null, '', query);
      }

      // Use event delegation for better performance
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.tagName === 'BUTTON' && target.hasAttribute('data-tag')) {
          const tag = target.dataset.tag!;
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
          } else {
            selectedTags.add(tag);
          }
          updateDisplay();
        }
      });

      // Handle initial URL parameters
      const params = new URLSearchParams(location.search);
      const initialTags = params.get('tags');
      if (initialTags) {
        selectedTags = new Set(initialTags.split(','));
        updateDisplay();
      }
    </script>
  </body>
</html>

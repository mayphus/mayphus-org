---
import BaseHead from '../../components/BaseHead.astro';
import SiteHeader from '../../components/SiteHeader.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';

const collection = await getCollection('content');
const nodes = collection
  .filter(node => node.data)
  .sort((a, b) => (b.data.date?.valueOf() ?? 0) - (a.data.date?.valueOf() ?? 0));

const tagSet = new Set<string>();
nodes.forEach(node => node.data.filetags?.forEach(tag => tagSet.add(tag)));
const tags = Array.from(tagSet).sort();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Content - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
  </head>
  <body class="paper-body">
    <SiteHeader />
    <main id="main" class="org-content" role="main">
      <header class="paper-article__header">
        <p class="paper-article__kicker">Catalogue</p>
        <h1>Content</h1>
        <p class="paper-article__abstract">
          Browse working notes, experiments, and essays. Use the keyword filter to explore related threads.
        </p>
      </header>

      <section class="paper-article__content">
        <div class="paper-filter">
          <nav class="paper-filter__tags" aria-label="Filter by tag">
            {tags.map(tag => (
              <button
                type="button"
                class="org-tag-button"
                data-tag={tag}
                aria-pressed="false"
                aria-label={`Toggle tag ${tag}`}
              >
                :{tag}:
              </button>
            ))}
          </nav>
        </div>

        <div id="items" class="org-list">
          {nodes.map(node => (
            <div data-tags={(node.data.filetags ?? []).join(' ')} class="org-list-item transition-opacity duration-200">
              <a href={`/content/${node.data.slug}/`} class="org-link">{node.data.title}</a>
              {node.data.filetags && (
                <span class="org-meta">
                  {node.data.filetags.map(tag => (
                    <span class="paper-keyword">{tag}</span>
                  ))}
                </span>
              )}
            </div>
          ))}
        </div>
      </section>
      <Footer />
    </main>
    <script>
      // Cache DOM references
      const tagButtons = document.querySelectorAll<HTMLButtonElement>('button[data-tag]');
      const items = document.querySelectorAll<HTMLElement>('#items .org-list-item');
      let selectedTags = new Set<string>();

      function updateDisplay() {
        // Convert selectedTags to array once for efficiency
        const selectedTagsArray = Array.from(selectedTags);
        
        // Update button states
        tagButtons.forEach(btn => {
          const tag = btn.dataset.tag!;
          const isSelected = selectedTags.has(tag);
          btn.setAttribute('aria-pressed', isSelected ? 'true' : 'false');
        });

        // Filter items
        items.forEach(item => {
          const itemTags = item.dataset.tags?.split(' ') || [];
          const matches = selectedTags.size === 0 || 
            selectedTagsArray.every(tag => itemTags.includes(tag));
          item.hidden = !matches;
        });

        // Update URL
        const query = selectedTags.size > 0 ? 
          `?tags=${selectedTagsArray.join(',')}` : '';
        history.replaceState(null, '', query);
      }

      // Use event delegation for better performance
      document.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target.tagName === 'BUTTON' && target.hasAttribute('data-tag')) {
          const tag = target.dataset.tag!;
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
          } else {
            selectedTags.add(tag);
          }
          updateDisplay();
        }
      });

      // Handle initial URL parameters
      const params = new URLSearchParams(location.search);
      const initialTags = params.get('tags');
      if (initialTags) {
        selectedTags = new Set(initialTags.split(','));
        updateDisplay();
      }
    </script>
  </body>
</html>

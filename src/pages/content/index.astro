---
import BaseHead from '../../components/BaseHead.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';

const collection = await getCollection('content');
const nodes = collection
  .filter(node => node.data)
  .sort((a, b) => (b.data.date?.valueOf() ?? 0) - (a.data.date?.valueOf() ?? 0));

const tagSet = new Set<string>();
nodes.forEach(node => node.data.filetags?.forEach(tag => tagSet.add(tag)));
const tags = Array.from(tagSet).sort();
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={`Content - ${SITE_TITLE}`} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <a href="#main" class="skip-link">Skip to main content</a>
    <main id="main">
      <h1><a href="/">Content</a></h1>
      <article>
        <div class="tag-filter">
          {tags.map(tag => (
            <button class="tag-button" data-tag={tag}>{tag}</button>
          ))}
        </div>

        <ul id="items">
          {nodes.map(node => (
            <li data-tags={(node.data.filetags ?? []).join(' ')}>
              <a href={`/content/${node.data.slug}/`}>{node.data.title}</a>
            </li>
          ))}
        </ul>
      </article>
      <Footer />
    </main>
    <style>
      .tag-filter {
        margin-bottom: 1.5rem;
      }


      .tag-button.active {
        background: #0969da;
        color: white;
        border-color: #0969da;
      }

      @media (prefers-color-scheme: dark) {
        .tag-button.active {
          background: #58a6ff;
          border-color: #58a6ff;
        }
      }
    </style>
    <script>
      const tagButtons = document.querySelectorAll<HTMLButtonElement>('.tag-button');
      const items = Array.from(document.querySelectorAll<HTMLLIElement>('#items li'));
      let selectedTags = new Set<string>();

      function updateDisplay() {
        // Update button states
        tagButtons.forEach(btn => {
          const tag = btn.dataset.tag!;
          btn.classList.toggle('active', selectedTags.has(tag));
        });

        // Filter items
        items.forEach(li => {
          const itemTags = li.dataset.tags ? li.dataset.tags.split(' ') : [];
          const matches = selectedTags.size === 0 || 
            Array.from(selectedTags).every(tag => itemTags.includes(tag));
          li.hidden = !matches;
        });

        // Update URL
        const query = selectedTags.size > 0 ? 
          `?tags=${Array.from(selectedTags).join(',')}` : '';
        history.replaceState(null, '', query);
      }

      // Add click handlers for tag buttons
      tagButtons.forEach(btn => {
        btn.addEventListener('click', () => {
          const tag = btn.dataset.tag!;
          if (selectedTags.has(tag)) {
            selectedTags.delete(tag);
          } else {
            selectedTags.add(tag);
          }
          updateDisplay();
        });
      });

      // Handle initial URL parameters
      const params = new URLSearchParams(location.search);
      const initialTags = params.get('tags');
      if (initialTags) {
        selectedTags = new Set(initialTags.split(','));
        updateDisplay();
      }
    </script>
  </body>
</html>
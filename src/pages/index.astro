---
import BaseHead from '../components/BaseHead.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import { SITE_HOME, formatWithEmail } from '../lib/site';

const collection = await getCollection('content');
const nodes = collection
    .filter((node) => node.data)
    .sort((a, b) => {
        const dateA = a.data.date?.valueOf() || 0;
        const dateB = b.data.date?.valueOf() || 0;
        return dateB - dateA;
    });

const featuredProjects = nodes
  .filter((node) => node.data.filetags?.includes('project'))
  .slice(0, 5);

const recentArticles = nodes
  .filter((node) => node.data.filetags?.includes('article'))
  .slice(0, 5);

const projectHighlights = featuredProjects.slice(0, 2);
const writingHighlights = recentArticles.slice(0, 2);
const homeConfig = SITE_HOME;
const connectLead = formatWithEmail(homeConfig.connect.lead);
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <main id="main">
      <article>
        <section>
          <h1>{SITE_TITLE}</h1>
          {homeConfig.heroIntro.map((paragraph) => (
            <p>{paragraph}</p>
          ))}
        </section>

        {projectHighlights.length > 0 && (
          <section id="projects">
            <h2>{homeConfig.projects.title}</h2>
            <ul>
              {projectHighlights.map((node) => (
                <li>
                  <a href={`/content/${node.data.slug}/`}>{node.data.title}</a>
                </li>
              ))}
            </ul>
          </section>
        )}

        {writingHighlights.length > 0 && (
          <section id="writing">
            <h2>{homeConfig.writing.title}</h2>
            <ul>
              {writingHighlights.map((node) => (
                <li>
                  <a href={`/content/${node.data.slug}/`}>{node.data.title}</a>
                </li>
              ))}
            </ul>
            <p>
              <a href={homeConfig.writing.ctaHref}>{homeConfig.writing.ctaLabel}</a>
            </p>
          </section>
        )}

        <section id="connect">
          <h2>{homeConfig.connect.heading}</h2>
          <div set:html={connectLead ?? ''}></div>
          {homeConfig.connect.links.length > 0 && (
            <ul>
              {homeConfig.connect.links.map((link) => (
                <li>
                  <a
                    href={link.href}
                    target={link.external ? '_blank' : undefined}
                    rel={link.external ? 'noopener noreferrer' : undefined}
                  >
                    {link.label}
                  </a>
                </li>
              ))}
            </ul>
          )}
        </section>
      </article>
    </main>
  </body>
</html>
